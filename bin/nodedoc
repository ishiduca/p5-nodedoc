#!perl
package Cmd;
use strict;
use warnings;
sub new {
    my $class = shift;
    my $opts  = shift;
    my $args  = delete $opts->{_};
    bless {
        opts => $opts,
        args => $args,
    }, $class;
}
sub validate {
    my $self = shift;
    my $validator = shift->with(qw( NoThrow ));
    my $opts      = $validator->validate( %{$self->{opts}} );

    if ($validator->has_errors) {
        my $errors = $validator->clear_errors;
        for my $err (@{$errors}) {
            print $err->{message}, "\n";
        }
        die;
    }

    $self->{opts} = $opts;

    $self;
}
sub test {
    my $self = shift;
    my $cb   = pop;
    return if scalar(keys %{$self->{opts}})              != scalar @_;
    return if scalar(grep{ exists $self->{opts}{$_} }@_) != scalar @_;

    $cb->($self->{opts}, $self->{args});
    exit 0;
}
1;

package main;
use strict;
use warnings;
use Nodedoc;
use Smart::Options;
use Data::Validator;
use Mouse::Util::TypeConstraints;

subtype 'Cmd::Type::with'
  => as      'Str'
  => where   { /^[prm]$/ }
  => message { qq("with" option must be "p" or "r" or "m") }
;

my $cmd = Cmd->new( Smart::Options->new
  ->options(
    h   => { alias => 'help' },
    dir => { default => '.' },
    ls  => { alias => 'list' },
    l   => { alias => 'loc' },
    m   => { alias => 'module' },
    lib => { alias => 'library' },
    p   => { alias => 'package_json' },
    r   => { alias => 'readme' },
  )
  ->boolean(qw{
    help list tree
  })
  ->demand('dir')
  ->parse
);

$cmd->validate( Data::Validator->new(
    help => { isa => 'Bool', optional => 1 },
    list => { isa => 'Bool', optional => 1 },
    tree => { isa => 'Bool', optional => 1 },
    dir  => { isa => 'Str' },
    loc          => { isa => 'Str', optional => 1 },
    package_json => { isa => 'Str', optional => 1 },
    module       => { isa => 'Str', optional => 1 },
    readme       => { isa => 'Str', optional => 1 },
    library      => { isa => 'Str', optional => 1 },
    with         => { isa => 'Cmd::Type::with', optional => 1 },
  )
);

my $nd = Nodedoc->new( delete $cmd->{opts}{dir} );

$cmd->test(qw/help/ => sub { help() });
$cmd->test(qw/list/ => sub { list($nd, 'list') });
$cmd->test(qw/tree/ => sub { list($nd, 'tree') });
$cmd->test(qw/loc with/ => sub {
    my($opts, undef) = @_;
    my %mode = (
        p => 'package_json',
        m => 'module',
        r => 'readme',
    );
    display_path($nd, $opts->{loc}, $mode{$opts->{with}});
});
$cmd->test(qw/loc library/ => sub {
    my($opts, undef) = @_;
    display_path($nd, $opts->{loc}, 'library', $opts->{library});
});
$cmd->test(qw/loc/ => sub {
    my($opts, undef) = @_;
    display_path($nd, $opts->{loc}, 'module');
});
$cmd->test(qw/module library/ => sub {
    my($opts, undef) = @_;
    display_contents($nd, $opts->{module}, 'library', $opts->{library});
});
$cmd->test(qw/library/ => sub {
    my($opts, $args) = @_;
    $args->[0] or help(qq("module_name" not found));

    display_contents($nd, $args->[0], 'library', $opts->{library});
});

for my $mode (qw/package_json readme module/) {
    $cmd->test($mode => sub {
        my($opts, undef) = @_;
        display_contents($nd, $opts->{$mode}, $mode);
    });
}

$cmd->test(sub {
    my(undef, $args) = @_;
    $args->[0] or help(qq("module_name" not found));

    display_contents($nd, $args->[0], 'readme');
});

help(qq(Maybe option is wrong. \(wrong option name is used or different combination.\)));

exit 0;

sub help {
    if(my $message = shift) {
        die<<"DYING_MESSAGE";

nodedoc v$Nodedoc::VERSION - display the document of Node.js modules

    error: $message

Show help: nodedoc -h

DYING_MESSAGE
;
    }
    print<<"HELP";

nodedoc v$Nodedoc::VERSION - display the document of Node.js modules

Usage:
    nodedoc -h
    nodedoc [-dir directory] [-ls |
                              -tree |
                              -l module_name [-with option | -lib relative_path] |
                              -p module_name |
                              -r module_name |
                              -m module_name [-lib relative_path]]
  
Options:
    -h, --help          display help
    -dir                directory that is started to scan
    -ls, --list         dispaly modules list
    -tree               dispaly modules list with dependences it
    -l, --loc           display location abs path
    -with               using with "loc" option. this option must be "p" or "r" or "m"
    -lib, --library     using with "loc" option or "module" option.
                         this option must be relative path from "main" js
    -p, --package_json  display the contents of package.json
    -r, --readme        dispaly the contents of README.(*)
    -m, --module        dispaly the contents of "main" js
   
Example:
    nodedoc -l mongoose
    nodedoc -l mongoose -with r              display mongoose's README path
    nodedoc -r mongoose                      display mongoose's README contents
    nodedoc -l mongoose -lib ./lib/index.js  display mongoose's library js
   
    if you can use "mad".

    nodedoc -r mongoose | mad -               display mongoose's README contents. it is parsed

HELP
;
    exit 0;
}

sub _resolve_path {
    my($mod, $mode, $opt_library) = @_;
    if ($mode eq 'module') {
        return if ! $mod->{main};
        return $mod->{main};
    }
    if ($mode =~ /^(package_json|readme)$/) {
        if ($mod->{$mode} && $mod->{$mode}{file}) {
            return $mod->{$mode}{file};
        }
        return;
    }
    if ($mode eq 'library' && defined $opt_library) {
        return if ! $mod->{main};
        require File::Basename;
        return Nodedoc::Find::resolve(
            File::Basename::dirname( $mod->{main} ), $opt_library
        );
    }
}
sub _display {
    my($cb, $nd, $mod_name, $mode, $opt_library) = @_;
    $nd->find( $mod_name => sub {
        my $mod = shift;
        if (my $file = _resolve_path( $mod, $mode, $opt_library)) {
            $cb->( $file );
            exit 0;
        }
        help(qq("$mod_name" has not "$mode" file));
    });
    help(qq("$mod_name" not found));
}
sub display_contents {
    return _display_package_json_contents(@_) if $_[2] eq 'package_json';

    unshift @_, sub {
        my $file = shift;
        print do {
            local $/;
            open my $fh, '<', $file or die $!;
            <$fh>;
        };
    };

    _display(@_);
}
sub display_path {
    unshift @_, sub { print @_ };
    _display(@_);
}

sub _display_package_json_contents {
    my($nd, $mod_name, undef) = @_;
    $nd->find( $mod_name => sub {
        my $mod = shift;
        if ($mod->{package_json}) {
            if (my $data = $mod->{package_json}{data}) {
                $data->{readme} = qq(try `nodedoc --readme $mod_name`)
                    if defined $data->{readme};
                require YAML;
                print YAML::Dump($data);
                exit 0;
            }
            die qq("$mod_name" has not "package_json");
        }
    });
    help(qq("$mod_name" not found));
}

sub list {
    my $nd = shift;
    my $mode = shift || 'list';
    my $make_modules_mode = $mode eq 'list' ? 'make_modules_list' : 'make_modules_tree';
    my $modules = $nd->$make_modules_mode->modules;
    for my $mod_name (sort{ uc $a cmp uc $b } keys %{$modules}) {
        my $mod  = $nd->module( $mod_name );
        my $ver  = $mod->{version} ? $mod->{version} : 'version.not.found';
        my $main = $mod->{main}    ? $mod->{main}    : 'main not found';
        print qq($mod_name\@$ver\t$main\n);
        _loop($mod, 1) if $mode eq 'tree';
    }
}

sub _loop {
    my($mod, $i) = @_;
    return if ! exists $mod->{dependences};

    my $deps = $mod->{dependences};
    for my $child_name (keys %{$deps}) {
        my $child = $deps->{$child_name};
        print( '    ' x $i . "$child->{name}\n");
        _loop($child, $i + 1);
    }
}

1;

